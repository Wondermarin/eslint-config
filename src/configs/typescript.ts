import { interopDefault } from "../utils/interop-default";
import { EGlob } from "../constants/glob";

import type { IConfig } from "../types/config";

export async function typescriptConfig(): Promise<IConfig[]> {
  const [typescriptParser, typescriptPlugin] = await Promise.all([
    interopDefault(import("@typescript-eslint/parser")),
    interopDefault(import("@typescript-eslint/eslint-plugin")),
  ]);

  return [
    {
      name: "wondermarin/eslint-config/typescript",
      files: [EGlob.TS, EGlob.TSX, EGlob.VUE],
      languageOptions: {
        parser: typescriptParser,
        parserOptions: {
          project: true,
          tsconfigRootDir: process.cwd(),
        },
      },
      plugins: {
        "@typescript-eslint": typescriptPlugin,
      },
      rules: {
        "@typescript-eslint/adjacent-overload-signatures": "error",
        "@typescript-eslint/array-type": ["error", { default: "array" }],
        "@typescript-eslint/await-thenable": "error",
        "@typescript-eslint/ban-ts-comment": [
          "error",
          {
            minimumDescriptionLength: 3,
            "ts-check": "allow-with-description",
            "ts-expect-error": "allow-with-description",
            "ts-ignore": "allow-with-description",
            "ts-nocheck": "allow-with-description",
          },
        ],
        "@typescript-eslint/ban-tslint-comment": "error",
        "@typescript-eslint/class-literal-property-style": ["error", "fields"],
        "@typescript-eslint/class-methods-use-this": "off",
        "@typescript-eslint/consistent-generic-constructors": ["error", "constructor"],
        "@typescript-eslint/consistent-indexed-object-style": ["error", "record"],
        "@typescript-eslint/consistent-return": "off",
        "@typescript-eslint/consistent-type-assertions": [
          "error",
          {
            assertionStyle: "as",
            objectLiteralTypeAssertions: "allow-as-parameter",
          },
        ],
        "@typescript-eslint/consistent-type-definitions": ["error", "interface"],
        "@typescript-eslint/consistent-type-exports": ["error", { fixMixedExportsWithInlineTypeSpecifier: true }],
        "@typescript-eslint/consistent-type-imports": [
          "error",
          {
            disallowTypeAnnotations: true,
            fixStyle: "inline-type-imports",
            prefer: "type-imports",
          },
        ],
        "@typescript-eslint/default-param-last": "error",
        "@typescript-eslint/dot-notation": [
          "error",
          {
            allowIndexSignaturePropertyAccess: false,
            allowKeywords: true,
            allowPrivateClassPropertyAccess: false,
            allowProtectedClassPropertyAccess: false,
          },
        ],
        "@typescript-eslint/explicit-function-return-type": "off",
        "@typescript-eslint/explicit-member-accessibility": ["error", { accessibility: "explicit" }],
        "@typescript-eslint/explicit-module-boundary-types": "off",
        "@typescript-eslint/init-declarations": "off",
        "@typescript-eslint/max-params": "off",
        "@typescript-eslint/member-ordering": "off",
        "@typescript-eslint/method-signature-style": ["error", "property"],
        "@typescript-eslint/naming-convention": [
          "error",
          {
            selector: "accessor",
            format: ["strictCamelCase"],
            leadingUnderscore: "forbid",
            trailingUnderscore: "forbid",
          },
          {
            selector: "classMethod",
            format: ["strictCamelCase"],
            leadingUnderscore: "forbid",
            trailingUnderscore: "forbid",
          },
          {
            selector: "objectLiteralMethod",
            format: ["strictCamelCase", "StrictPascalCase"],
            leadingUnderscore: "forbid",
            trailingUnderscore: "forbid",
          },
          {
            selector: "typeMethod",
            format: ["strictCamelCase", "StrictPascalCase"],
            leadingUnderscore: "forbid",
            trailingUnderscore: "forbid",
          },
          {
            selector: "classProperty",
            format: ["strictCamelCase"],
            leadingUnderscore: "forbid",
            trailingUnderscore: "forbid",
          },
          {
            selector: "class",
            format: ["StrictPascalCase"],
            leadingUnderscore: "forbid",
            trailingUnderscore: "forbid",
          },
          {
            selector: "enum",
            format: ["StrictPascalCase"],
            prefix: ["E"],
            leadingUnderscore: "forbid",
            trailingUnderscore: "forbid",
          },
          {
            selector: "interface",
            format: ["StrictPascalCase"],
            prefix: ["I"],
            leadingUnderscore: "forbid",
            trailingUnderscore: "forbid",
          },
          {
            selector: "typeAlias",
            format: ["StrictPascalCase"],
            prefix: ["T"],
            leadingUnderscore: "forbid",
            trailingUnderscore: "forbid",
          },
          {
            selector: "typeParameter",
            format: ["StrictPascalCase"],
            leadingUnderscore: "forbid",
            trailingUnderscore: "forbid",
          },
          {
            selector: "function",
            format: ["strictCamelCase", "StrictPascalCase"],
            leadingUnderscore: "forbid",
            trailingUnderscore: "forbid",
          },
          {
            selector: "parameter",
            format: ["strictCamelCase"],
            leadingUnderscore: "forbid",
            trailingUnderscore: "forbid",
          },
          {
            selector: "variable",
            format: ["strictCamelCase", "StrictPascalCase"],
            leadingUnderscore: "forbid",
            trailingUnderscore: "forbid",
          },
          {
            selector: "enumMember",
            format: ["StrictPascalCase", "UPPER_CASE"],
            leadingUnderscore: "forbid",
            trailingUnderscore: "forbid",
          },
          {
            selector: "import",
            format: ["strictCamelCase", "StrictPascalCase"],
            leadingUnderscore: "forbid",
            trailingUnderscore: "forbid",
          },
          {
            selector: "parameterProperty",
            format: ["strictCamelCase"],
            leadingUnderscore: "forbid",
            trailingUnderscore: "forbid",
          },
        ],
        "@typescript-eslint/no-array-constructor": "error",
        "@typescript-eslint/no-array-delete": "error",
        "@typescript-eslint/no-base-to-string": "error",
        "@typescript-eslint/no-confusing-non-null-assertion": "error",
        "@typescript-eslint/no-confusing-void-expression": [
          "error",
          {
            ignoreArrowShorthand: false,
            ignoreVoidOperator: false,
            ignoreVoidReturningFunctions: false,
          },
        ],
        "@typescript-eslint/no-dupe-class-members": "off",
        "@typescript-eslint/no-duplicate-enum-values": "error",
        "@typescript-eslint/no-duplicate-type-constituents": [
          "error",
          {
            ignoreIntersections: false,
            ignoreUnions: false,
          },
        ],
        "@typescript-eslint/no-dynamic-delete": "off",
        "@typescript-eslint/no-empty-function": "error",
        "@typescript-eslint/no-empty-object-type": [
          "error",
          {
            allowInterfaces: "never",
            allowObjectTypes: "never",
          },
        ],
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/no-extra-non-null-assertion": "error",
        "@typescript-eslint/no-extraneous-class": [
          "error",
          {
            allowConstructorOnly: false,
            allowEmpty: false,
            allowStaticOnly: false,
            allowWithDecorator: true,
          },
        ],
        "@typescript-eslint/no-floating-promises": [
          "error",
          {
            checkThenables: true,
            ignoreIIFE: true,
            ignoreVoid: true,
          },
        ],
        "@typescript-eslint/no-for-in-array": "error",
        "@typescript-eslint/no-implied-eval": "error",
        "@typescript-eslint/no-import-type-side-effects": "error",
        "@typescript-eslint/no-inferrable-types": [
          "error",
          {
            ignoreParameters: false,
            ignoreProperties: false,
          },
        ],
        "@typescript-eslint/no-invalid-this": "off",
        "@typescript-eslint/no-invalid-void-type": [
          "error",
          {
            allowAsThisParameter: false,
            allowInGenericTypeArguments: true,
          },
        ],
        "@typescript-eslint/no-loop-func": "off",
        "@typescript-eslint/no-magic-numbers": "off",
        "@typescript-eslint/no-meaningless-void-operator": ["error", { checkNever: false }],
        "@typescript-eslint/no-misused-new": "error",
        "@typescript-eslint/no-misused-promises": [
          "error",
          {
            checksConditionals: true,
            checksSpreads: true,
            checksVoidReturn: {
              attributes: false,
            },
          },
        ],
        "@typescript-eslint/no-mixed-enums": "error",
        "@typescript-eslint/no-namespace": [
          "error",
          {
            allowDeclarations: false,
            allowDefinitionFiles: true,
          },
        ],
        "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
        "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
        "@typescript-eslint/no-non-null-assertion": "off",
        "@typescript-eslint/no-redeclare": "off",
        "@typescript-eslint/no-redundant-type-constituents": "error",
        "@typescript-eslint/no-require-imports": "error",
        "@typescript-eslint/no-restricted-imports": "off",
        "@typescript-eslint/no-restricted-types": "off",
        "@typescript-eslint/no-shadow": "off",
        "@typescript-eslint/no-this-alias": ["error", { allowDestructuring: true }],
        "@typescript-eslint/no-unnecessary-boolean-literal-compare": [
          "error",
          {
            allowComparingNullableBooleansToFalse: false,
            allowComparingNullableBooleansToTrue: false,
          },
        ],
        "@typescript-eslint/no-unnecessary-condition": [
          "error",
          {
            allowConstantLoopConditions: false,
            checkTypePredicates: true,
          },
        ],
        "@typescript-eslint/no-unnecessary-parameter-property-assignment": "error",
        "@typescript-eslint/no-unnecessary-qualifier": "error",
        "@typescript-eslint/no-unnecessary-template-expression": "error",
        "@typescript-eslint/no-unnecessary-type-arguments": "error",
        "@typescript-eslint/no-unnecessary-type-assertion": "error",
        "@typescript-eslint/no-unnecessary-type-constraint": "error",
        "@typescript-eslint/no-unnecessary-type-parameters": "error",
        "@typescript-eslint/no-unsafe-argument": "error",
        "@typescript-eslint/no-unsafe-assignment": "off",
        "@typescript-eslint/no-unsafe-call": "off",
        "@typescript-eslint/no-unsafe-declaration-merging": "error",
        "@typescript-eslint/no-unsafe-enum-comparison": "error",
        "@typescript-eslint/no-unsafe-function-type": "error",
        "@typescript-eslint/no-unsafe-member-access": "off",
        "@typescript-eslint/no-unsafe-return": "off",
        "@typescript-eslint/no-unsafe-unary-minus": "error",
        "@typescript-eslint/no-unused-expressions": [
          "error",
          {
            allowShortCircuit: false,
            allowTaggedTemplates: false,
            allowTernary: false,
            enforceForJSX: false,
          },
        ],
        "@typescript-eslint/no-unused-vars": [
          "error",
          {
            args: "after-used",
            caughtErrors: "all",
            ignoreClassWithStaticInitBlock: false,
            ignoreRestSiblings: true,
            reportUsedIgnorePattern: true,
            vars: "all",
          },
        ],
        "@typescript-eslint/no-use-before-define": [
          "error",
          {
            allowNamedExports: false,
            classes: true,
            enums: true,
            functions: true,
            ignoreTypeReferences: true,
            typedefs: true,
            variables: true,
          },
        ],
        "@typescript-eslint/no-useless-constructor": "error",
        "@typescript-eslint/no-useless-empty-export": "error",
        "@typescript-eslint/no-wrapper-object-types": "error",
        "@typescript-eslint/non-nullable-type-assertion-style": "error",
        "@typescript-eslint/only-throw-error": "off",
        "@typescript-eslint/parameter-properties": "off",
        "@typescript-eslint/prefer-as-const": "error",
        "@typescript-eslint/prefer-destructuring": [
          "error",
          {
            array: true,
            object: true,
          },
          {
            enforceForDeclarationWithTypeAnnotation: false,
            enforceForRenamedProperties: false,
          },
        ],
        "@typescript-eslint/prefer-enum-initializers": "error",
        "@typescript-eslint/prefer-find": "error",
        "@typescript-eslint/prefer-for-of": "error",
        "@typescript-eslint/prefer-function-type": "error",
        "@typescript-eslint/prefer-includes": "error",
        "@typescript-eslint/prefer-literal-enum-member": ["error", { allowBitwiseExpressions: true }],
        "@typescript-eslint/prefer-namespace-keyword": "error",
        "@typescript-eslint/prefer-nullish-coalescing": [
          "error",
          {
            allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing: false,
            ignoreConditionalTests: true,
            ignoreMixedLogicalExpressions: true,
            ignorePrimitives: {
              bigint: false,
              boolean: false,
              number: false,
              string: false,
            },
            ignoreTernaryTests: false,
          },
        ],
        "@typescript-eslint/prefer-optional-chain": [
          "error",
          {
            allowPotentiallyUnsafeFixesThatModifyTheReturnTypeIKnowWhatImDoing: false,
            checkAny: true,
            checkBigInt: true,
            checkBoolean: true,
            checkNumber: true,
            checkString: true,
            checkUnknown: true,
            requireNullish: false,
          },
        ],
        "@typescript-eslint/prefer-promise-reject-errors": "off",
        "@typescript-eslint/prefer-readonly": ["error", { onlyInlineLambdas: false }],
        "@typescript-eslint/prefer-readonly-parameter-types": "off",
        "@typescript-eslint/prefer-reduce-type-parameter": "error",
        "@typescript-eslint/prefer-regexp-exec": "error",
        "@typescript-eslint/prefer-return-this-type": "error",
        "@typescript-eslint/prefer-string-starts-ends-with": ["error", { allowSingleElementEquality: "never" }],
        "@typescript-eslint/promise-function-async": [
          "error",
          {
            allowAny: true,
            checkArrowFunctions: true,
            checkFunctionDeclarations: true,
            checkFunctionExpressions: true,
            checkMethodDeclarations: true,
          },
        ],
        "@typescript-eslint/require-array-sort-compare": ["error", { ignoreStringArrays: true }],
        "@typescript-eslint/require-await": "error",
        "@typescript-eslint/restrict-plus-operands": [
          "error",
          {
            allowAny: false,
            allowBoolean: false,
            allowNullish: false,
            allowNumberAndString: false,
            allowRegExp: false,
            skipCompoundAssignments: false,
          },
        ],
        "@typescript-eslint/restrict-template-expressions": [
          "error",
          {
            allowAny: true,
            allowArray: true,
            allowBoolean: true,
            allowNullish: true,
            allowNumber: true,
            allowRegExp: true,
          },
        ],
        "@typescript-eslint/return-await": ["error", "in-try-catch"],
        "@typescript-eslint/strict-boolean-expressions": "off",
        "@typescript-eslint/switch-exhaustiveness-check": [
          "error",
          {
            allowDefaultCaseForExhaustiveSwitch: true,
            requireDefaultForNonUnion: false,
          },
        ],
        "@typescript-eslint/triple-slash-reference": [
          "error",
          {
            lib: "always",
            path: "never",
            types: "prefer-import",
          },
        ],
        "@typescript-eslint/typedef": "off",
        "@typescript-eslint/unbound-method": ["error", { ignoreStatic: false }],
        "@typescript-eslint/unified-signatures": ["error", { ignoreDifferentlyNamedParameters: false }],
        "@typescript-eslint/use-unknown-in-catch-callback-variable": "error",
        "@typescript-eslint/no-deprecated": "error",
        "default-param-last": "off",
        "dot-notation": "off",
        "no-array-constructor": "off",
        "no-dupe-class-members": "off",
        "no-empty-function": "off",
        "no-implied-eval": "off",
        "no-invalid-this": "off",
        "no-loop-func": "off",
        "no-magic-numbers": "off",
        "no-redeclare": "off",
        "no-restricted-imports": "off",
        "no-shadow": "off",
        "no-throw-literal": "off",
        "no-undef": "off",
        "no-unused-expressions": "off",
        "no-unused-vars": "off",
        "no-use-before-define": "off",
        "no-useless-constructor": "off",
        "prefer-destructuring": "off",
        "require-await": "off",
      },
    },
  ];
}
